import Head from 'next/head';
import { Component } from 'react';
import { Transport } from 'tone';
import { ComponentsSection } from '../components/components';
import { Hero } from '../components/hero';
import { LogsSection } from '../components/logs';
import { StepsSection } from '../components/steps';
import { Api } from '../core/api';
import { audioPlayer } from '../core/audio-player';
import { Danny, DannySetup } from '../core/danny';
import { Installation } from '../core/installation';
import { Step } from '../core/step';

export interface HomeProps {}
export interface HomeState {
  danny: Danny;
  setup: DannySetup;
  activeStep?: number;
  isRunning: boolean;
}

export default class Home extends Component<HomeProps, HomeState> {
  // apiBase = 'http://localhost:3000/api/v1';
  constructor(props: HomeProps) {
    super(props);

    this.state = {
      danny: {},
      setup: {
        steps: [],
      },
      isRunning: false,
    };
  }

  startPolling() {
    const poll = () => {
      Installation.poller().then((danny) => {
        this.setState({
          danny,
        });

        setTimeout(() => poll(), 250);
      });
    };

    poll();
  }

  startInstallation() {
    const processStep = (index: number) => {
      const { setup } = this.state;

      const currentStep = setup.steps[index];

      console.log('Processing Steps - Running = ', this.state.isRunning);

      if (!currentStep || !this.state.isRunning) {
        if (!currentStep) {
          this.setState({
            activeStep: -1,
            setup: {
              steps: this.state.setup.steps.map((step) => {
                step.isComplete = false;
                return step;
              }),
            },
          });
        }
        return;
      } else {
        this.setState({
          activeStep: index,
        });
      }

      currentStep
        .execute(() => this.state.danny)
        .then(() => {
          if (this.state.isRunning) {
            processStep(index + 1);
          } else {
            this.setState({
              setup: {
                steps: this.state.setup.steps.map((step) => {
                  step.isComplete = false;
                  return step;
                }),
              },
            });
          }
        });
    };

    Installation.stop().then(() =>
      Installation.start().then(() => {
        this.setState(
          {
            activeStep: 0,
            isRunning: true,
          },
          () => processStep(0)
        );
      })
    );
  }

  stopInstallation() {
    audioPlayer.stop();
    this.setState({
      activeStep: -1,
      isRunning: false,
      setup: {
        steps: this.state.setup.steps.map((step) => {
          step.isComplete = false;
          return step;
        }),
      },
    });

    Installation.stop().then(() => {});
  }

  componentDidMount() {
    audioPlayer.speedUp(2);
    Installation.stop().then(() => {
      Api.invoke<Danny>('/danny').then((danny) => this.setState({ danny }));
      Api.invoke<DannySetup>('/danny/setup').then((setup) =>
        this.setState({
          setup: {
            steps: setup.steps.map((step) => new Step(step)),
          },
          activeStep: -1,
        })
      );

      this.startPolling();
    });
  }

  render() {
    const { danny, setup } = this.state;

    return (
      <>
        <Head>
          <title>Danny The Dinosaur</title>
          <meta name='description' content='Generated by create next app' />
          <link rel='icon' href='/favicon.ico' />
        </Head>
        <div className='page w-3/4 mx-auto mt-16'>
          <Hero
            danny={this.state.danny}
            onConnect={() => Installation.connect()}
            onStart={() => this.startInstallation()}
            onStop={() => this.stopInstallation()}
          ></Hero>

          <div className='flex'>
            <ComponentsSection
              components={danny.components}
            ></ComponentsSection>

            <StepsSection
              steps={setup.steps}
              danny={this.state.danny}
              activeStep={this.state.activeStep}
            ></StepsSection>
          </div>

          <LogsSection logs={this.state.danny.logs}></LogsSection>
        </div>
      </>
    );
  }
}
